(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{174:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"算法dll开发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法dll开发","aria-hidden":"true"}},[t._v("#")]),t._v(" 算法dll开发")]),t._v(" "),a("h2",{attrs:{id:"步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#步骤","aria-hidden":"true"}},[t._v("#")]),t._v(" 步骤")]),t._v(" "),a("ol",[a("li",[t._v("打开 vs2017，创建一个空项目；")]),t._v(" "),a("li",[t._v("添加一个算法库工程，选择 Qt class library，命名为{ 算法名 }；")]),t._v(" "),a("li",[t._v("将依赖拷贝到算法工程目录下；")]),t._v(" "),a("li",[t._v("右键配置工程属性；\n"),a("ul",[a("li",[t._v("c/c++ -> 预处理器 -> 预处理器定义 -> 添加 "),a("code",[t._v("MODULE_LIB")]),t._v("；")]),t._v(" "),a("li",[t._v("链接器 -> 常规 -> 附加库目录 -> 添加 "),a("code",[t._v(".\\lib")]),t._v("；")])])]),t._v(" "),a("li",[t._v("新建算法c++类，添加"),a("code",[t._v('#include "module_plugin_register.h"')]),t._v("，算法类继承"),a("code",[t._v("AbstractModule")]),t._v(";")]),t._v(" "),a("li",[t._v("实现 "),a("code",[t._v("AbstractModule")]),t._v(" 中的虚函数；")])]),t._v(" "),a("h2",{attrs:{id:"虚函数接口说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚函数接口说明","aria-hidden":"true"}},[t._v("#")]),t._v(" 虚函数接口说明")]),t._v(" "),a("p",[t._v("必须实现函数：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("void release()")])])]),t._v(" "),a("p",[t._v("用于释放算法库内的内存。当模块被删除时，调用本函数。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("void initResultsType(MyResult *result, DrawableResult *draw_result);")])])]),t._v(" "),a("p",[t._v("用户可以自定义结果数据结构，包括数值型结果 result 和绘制图元 draw_result。当模块第一次被创建出来的时候调用 1 次。")]),t._v(" "),a("p",[t._v("数值型结果支持的数据类型包括：int整数，double小数，str字符串；")]),t._v(" "),a("p",[t._v("绘制图元支持常见的图元，包括：旋转矩形、圆形、直线、十字、字符串等等，具体支持类型参照 "),a("code",[t._v("result_type.h")]),t._v(" 文件。")]),t._v(" "),a("p",[t._v("以"),a("strong",[t._v("模板匹配算法模块")]),t._v("为例：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 添加名称为“number”的整数类型结果，用于保存当前找到几个匹配结果")]),t._v("\nresult"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addSingleResult")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"number"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BASIC_INT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置该值的实际有效参数数量始终为1 ")]),t._v("\nresult"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setRealNumber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"number"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/* \n** 开始创建一个复杂类型结果，该类型类似：\n\nstruct\n{\n    double target_x；\n    double target_y；\n    double target_angle；\n    double target_score；\n}\n\n** 该数据结构拥有 4 项数据，\n** 每一项的数据最多为 10 个,\n** 实际使用时，如果只找到了 2 个结果，只需要调用函数 setRealNumber("target", 2) 设置有效数据即可\n*/')]),t._v("\n\nresult"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("startGroup")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"target"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    result"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addGroupResult")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"target"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"target_x"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BASIC_DOUBLE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    result"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addGroupResult")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"target"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"target_y"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BASIC_DOUBLE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    result"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addGroupResult")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"target"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"target_angle"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BASIC_DOUBLE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    result"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addGroupResult")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"target"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"target_score"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BASIC_DOUBLE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nresult"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("endGroup")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"target"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置绘制图元要画的只有一种类型")]),t._v("\ndraw_result"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTypeNumber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置绘制图元第一种类型，是 ROTATE_RECT 旋转矩形，且最多可以画10个")]),t._v("\ndraw_result"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setElementType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" DrawElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("ROTATE_RECT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("ul",[a("li",[a("code",[t._v("int prepareParam(int runtime_mode)")])])]),t._v(" "),a("p",[t._v("该函数用于验证参数是否完备，完备情况下返回0。当必要参数未配置好的时候，返回错误码。请在 "),a("code",[t._v("error_code.xlsx")]),t._v(" 文件中添加错误码描述。\n该函数在退出配置窗口和运行前，都会执行。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("int process(const GtMat *mat, MyResult *result, DrawableResult *draw_result, int runmode_type)")])])]),t._v(" "),a("p",[t._v("运行时函数，每一帧图像都会调用一次本函数。在本函数内实现算法即可。\n本函数内也可以将当前帧运算结果填充好。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("int output(MyResult *result, DrawableResult *draw_result)")])])]),t._v(" "),a("p",[t._v("运行时输出函数，每一帧图像在 process 之后会调用一次本函数，将当前帧运算结果填充好。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("int saveParam(const QString &path, const QString &module_id, QJsonObject &json, bool param_only)")])])]),t._v(" "),a("p",[t._v("保存模块的参数和一些需要保存的图像，参数以 json 的形式表现。在保存工程时被调用。当 param_only 为 true 时，请不要保存图像。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("int readParam(const QJsonObject &json, const QString &path, const QString &module_id, bool param_only)")])])]),t._v(" "),a("p",[t._v("读取模块的参数。在打开工程时被调用。当 param_only 为 true 时，请不要读取图像。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("void setReferImage(const GtMat *image)")])])]),t._v(" "),a("p",[t._v("设置模块的基准图像。当基准图像被更改时会调用本函数。")])])}],!1,null,null,null);e.options.__file="module2-algoth.md";s.default=e.exports}}]);